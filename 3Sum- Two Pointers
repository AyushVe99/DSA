// Optimal Solution
class Solution {
    public List<List<Integer>> threeSum(int[] arr) {

        // ArrayList to store unique triplets with sum = 0
        ArrayList<List<Integer>> list = new ArrayList<>();
        int n=arr.length;
        Arrays.sort(arr);
        for (int i = 0; i < n; i++) {
        // Skip duplicate values for the first element of the triplet
          if(i>0 && arr[i]==arr[i-1]) continue;
          int j=i+1;
          int k=n-1;

          while(j<k){
            int sum=arr[i]+arr[j]+arr[k];
            if(sum<0){
                j++;
            }
            else if(sum>0){
                k--;
            }
            else{
                List<Integer> tempList = Arrays.asList(arr[i], arr[j], arr[k]);
                list.add(tempList);
                j++;
                k--;

                //To avoid duplicate Triplets
                while( j<k && arr[j]==arr[j-1]) j++;
                while( j<k && arr[k]==arr[k+1]) k--;

            }


          }
        }

          return list;

    }
}
