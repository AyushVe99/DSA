import java.util.HashMap;

class Solution {
    public long subarrayXor(int arr[], int k) {
        // HashMap to store prefix XOR frequencies
        HashMap<Integer, Integer> map = new HashMap<>();
        
        int xorNum = 0;   // Stores the cumulative XOR (prefix XOR)
        int count = 0;    // Stores the total count of subarrays with XOR = k
        int n = arr.length;

        for (int i = 0; i < n; i++) {
            xorNum ^= arr[i];  // Compute prefix XOR from index 0 to i

            // Case 1: If prefix XOR is equal to k, it forms a valid subarray from 0 to i
            if (xorNum == k) {
                count++;
            }

            // Case 2: Check if there is a previous prefix XOR such that:
            // previousXor ^ currentXor = k â†’ currentXor ^ k = previousXor
            int required = xorNum ^ k;

            // If 'required' XOR exists in the map, it means there are one or more
            // subarrays ending at index i that satisfy XOR = k
            if (map.containsKey(required)) {
                count += map.get(required);
            }

            // Update the frequency of the current prefix XOR in the map
            map.put(xorNum, map.getOrDefault(xorNum, 0) + 1); 
        }

        // Return the total count of subarrays with XOR = k
        return count;
    }
}
